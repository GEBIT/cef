// Copyright (c) 2023 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f58554684c1ee5bbe5237036c46ab5e234fad76a$
//

#include "libcef_dll/cpptoc/authenticator_request_callback_cpptoc.h"
#include "libcef_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK authenticator_request_callback_cont(
    struct _cef_authenticator_request_callback_t* self,
    const cef_string_t* pin) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: pin

  // Execute
  CefAuthenticatorRequestCallbackCppToC::Get(self)->Continue(CefString(pin));
}

void CEF_CALLBACK authenticator_request_callback_cancel(
    struct _cef_authenticator_request_callback_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  CefAuthenticatorRequestCallbackCppToC::Get(self)->Cancel();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

CefAuthenticatorRequestCallbackCppToC::CefAuthenticatorRequestCallbackCppToC() {
  GetStruct()->cont = authenticator_request_callback_cont;
  GetStruct()->cancel = authenticator_request_callback_cancel;
}

// DESTRUCTOR - Do not edit by hand.

CefAuthenticatorRequestCallbackCppToC::
    ~CefAuthenticatorRequestCallbackCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
CefRefPtr<CefAuthenticatorRequestCallback>
CefCppToCRefCounted<CefAuthenticatorRequestCallbackCppToC,
                    CefAuthenticatorRequestCallback,
                    cef_authenticator_request_callback_t>::
    UnwrapDerived(CefWrapperType type,
                  cef_authenticator_request_callback_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
CefWrapperType
    CefCppToCRefCounted<CefAuthenticatorRequestCallbackCppToC,
                        CefAuthenticatorRequestCallback,
                        cef_authenticator_request_callback_t>::kWrapperType =
        WT_AUTHENTICATOR_REQUEST_CALLBACK;
